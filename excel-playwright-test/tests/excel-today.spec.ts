/*
Task 2. End-to-end test automation

By using TypeScript and Playwright create a program that implements an end-to-end test for a standard Excel 
function TODAY() in Excel online, Chrome browser. The test should verify that the returned value corresponds 
to the date when the test is performed.

Requirements:
• Use configuration data (login, password, etc.) stored in a separate file.
• Use test framework to trigger test execution.
• The completed program should be available in a repository on GitHub.
• The program should be provided with a demo recording, and a brief verbal description answering the 
FAQ (instructions on how to run the test, any known bottlenecks/limitations/workarounds, alternative solutions, etc.);
*/

import { test, expect } from "@playwright/test";
import { credentials } from "../config/credentials";

test.beforeEach(async ({ page }) => {
  await page.goto('/');
});

test.describe('Excel online tests with storage authentication', () => {

  // load the Excel page with authentication already done using storageState
  test.use({ storageState: 'storage/auth.json' });

  test("Validate that standard Excel function TODAY() in Excel Online returns today's date", async ({ page }) => {

    // click the button that opens blank Excel (opens new tab)
    const popupPromise = page.waitForEvent('popup');
    await page.getByRole('button', { name: 'Excel' }).click();
    const excelPage = await popupPromise;
    
    // ensure focus and loading of the new tab
    await excelPage.bringToFront();
    await excelPage.waitForLoadState('domcontentloaded');

    // click on "Create blank workbook" in the NEW tab
    await Promise.any([
      excelPage.getByRole('button', { name: /blank workbook/i }).click(),
      excelPage.getByRole('link',   { name: /blank workbook/i }).click(),
      excelPage.getByText(/Create blank workbook/i).click(),
    ]);

    // wait for date to load in HTML
    await excelPage.waitForTimeout(10_000);

    // create frame variable 
    const locatorWacFrame = 'iframe[name="WacFrame_Excel_0"]'

    // adds the =TODAY() formula in the first cell using the formulas tab
    await excelPage.locator(locatorWacFrame).contentFrame().getByRole('tab', { name: 'Formulas' }).click()
    await excelPage.locator(locatorWacFrame).contentFrame().getByRole('button', { name: 'Close' }).click()
    await excelPage.locator(locatorWacFrame).contentFrame().getByRole('button', { name: 'Insert Function', exact: true }).click()
    await excelPage.locator(locatorWacFrame).contentFrame().getByRole('searchbox', { name: 'Search for a function' }).fill('TODAY')
    await excelPage.locator(locatorWacFrame).contentFrame().getByRole('gridcell', { name: 'TODAY', exact: true }).click();
    await excelPage.locator(locatorWacFrame).contentFrame().getByRole('button', { name: 'Insert', exact: true }).click();

    // aguarda carregamento da data no HTML
    await excelPage.waitForTimeout(20_000);

    // create frame locator variable 
    const frame = excelPage.frameLocator(locatorWacFrame);

    // get the aria-label from the "readout" element
    const aria = await frame.locator('#m_excelWebRenderer_ewaCtl_readoutElement2').getAttribute('aria-label');
    console.log(aria)
    
    // regex to extract only date values 
    const data = aria?.match(/\d{1,2}\/\d{1,2}\/\d{4}/)?.[0] ?? null;

    // expected date (MM-yyyy-dd)
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(1, '0');
    const dd = String(today.getDate()).padStart(2, '0');
    const expected = `${mm}/${dd}/${yyyy}`;
    console.log(expected)

    // validate that the value generated by the =TODAY() formula matches the current date
    expect(expected).toBe(data)
  });
});
